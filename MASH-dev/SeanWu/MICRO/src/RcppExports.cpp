// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _MICRO_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// testJSON
void testJSON(const std::string outfile, const std::vector<double> numvec, const std::vector<std::string> charvec);
RcppExport SEXP _MICRO_testJSON(SEXP outfileSEXP, SEXP numvecSEXP, SEXP charvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type numvec(numvecSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type charvec(charvecSEXP);
    testJSON(outfile, numvec, charvec);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MICRO_rcpp_hello_world", (DL_FUNC) &_MICRO_rcpp_hello_world, 0},
    {"_MICRO_testJSON", (DL_FUNC) &_MICRO_testJSON, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MICRO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
